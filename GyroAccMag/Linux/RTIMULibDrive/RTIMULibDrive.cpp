////////////////////////////////////////////////////////////////////////////
//
//  This file is part of RTIMULib
//
//  Copyright (c) 2014-2015, richards-tech, LLC
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy of
//  this software and associated documentation files (the "Software"), to deal in
//  the Software without restriction, including without limitation the rights to use,
//  copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
//  Software, and to permit persons to whom the Software is furnished to do so,
//  subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
//  PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
//  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
//  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
//  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


#include "RTIMULib.h"

int main()
{
    int sampleCount = 0;
    int sampleRate = 0;
    uint64_t rateTimer;
    uint64_t displayTimer;
    uint64_t now;

    //  Using RTIMULib here allows it to use the .ini file generated by RTIMULibDemo.
    //  Or, you can create the .ini in some other directory by using:
    //      RTIMUSettings *settings = new RTIMUSettings("<directory path>", "RTIMULib");
    //  where <directory path> is the path to where the .ini file is to be loaded/saved

    RTIMUSettings *settings = new RTIMUSettings("RTIMULib");

    RTIMU *imu = RTIMU::createIMU(settings);

    if ((imu == NULL) || (imu->IMUType() == RTIMU_TYPE_NULL)) {
        printf("No IMU found\n");
        exit(1);
    }

    //  This is an opportunity to manually override any settings before the call IMUInit

    //  set up IMU

    imu->IMUInit();

    //  this is a convenient place to change fusion parameters

    imu->setSlerpPower(0.02);
    imu->setGyroEnable(true);
    imu->setAccelEnable(true);
    imu->setCompassEnable(true);

    //  set up for rate timer

    rateTimer = displayTimer = RTMath::currentUSecsSinceEpoch();

    //  now just process data
	 printf("Sample Rate, Accelerometer x, Accelerometer y, Accelerometer z, Gyroscope x, Gyroscope y, Gyroscope z, Magnetometer x, Magnetometer y, Magnetometer z, Roll, Pitch, Yaw\n");
	 FILE *f = fopen("accgyromag.txt", "a");
    fprintf(f, "Sample Rate, Accelerometer x, Accelerometer y, Accelerometer z, Gyroscope x, Gyroscope y, Gyroscope z, Magnetometer x, Magnetometer y, Magnetometer z, Roll, Pitch, Yaw\n");
    fclose(f);
    while (1) {
        //  poll at the rate recommended by the IMU

        usleep(imu->IMUGetPollInterval() * 1000);

        while (imu->IMURead()) {
            RTIMU_DATA imuData = imu->getIMUData();
            RTVector3 magd = imu->getCompass();
            RTVector3 accd = imu->getAccel();
            RTVector3 gyrd = imu->getGyro();
            
            float mx = magd.x();
            float my = magd.y();
            float mz = magd.z();
            float ax = accd.x();
            float ay = accd.y();
            float az = accd.z();
            float gx = gyrd.x();
            float gy = gyrd.y();
            float gz = gyrd.z();
            float roll = imuData.fusionPose.x() * RTMATH_RAD_TO_DEGREE;
            float pitch = imuData.fusionPose.y() * RTMATH_RAD_TO_DEGREE;
            float yaw = imuData.fusionPose.z() * RTMATH_RAD_TO_DEGREE;

            sampleCount++;

            now = RTMath::currentUSecsSinceEpoch();

            //  display 10 times per second

            if ((now - displayTimer) > 100000) {
                printf("%d, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sampleRate, ax, ay, az, gx, gy, gz, mx, my, mz, roll, pitch, yaw);
                fflush(stdout);
                FILE *f = fopen("accgyromag.txt", "a");
   				 fprintf(f, "%d, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sampleRate, ax, ay, az, gx, gy, gz, mx, my, mz, roll, pitch, yaw);
   				 fclose(f);
                displayTimer = now;
            }

            //  update rate every second

            if ((now - rateTimer) > 1000000) {
                sampleRate = sampleCount;
                sampleCount = 0;
                rateTimer = now;
            }
        }
    }
}

